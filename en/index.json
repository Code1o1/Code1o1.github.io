[{"categories":null,"content":"How to use interfaces in Go? Just as many human-based languages exist, There are dozens of programming languages used in the industry today to communicate with computers. Each language has its own distinct features, though many times there are some similarities between programming languages. If you wish/need to master a programming language, you might wonder which one to learn.After all, it will take time to learn the language, so everyone want to make the right choice.\n No language perfectly fits for all the problems. It all depends on our ecosystem, needs and several other factors to choose languages. A large number of developers make mistake and choose programming languages just because it is more popular, trendy, and cool.\n GO is one of the important languages in many aspects. An interesting feature in Go is existence of interfaces.. You might have studied interfaces in other languages as well but Go language interfaces are different and easier as compared to other languages. In this blog we will mainly deal with interfaces in GO.\n In my past few days of learning and using Golang, I have come across many findings related to the use of interfaces.\n So if you ask what is interfaces?  An interface is defined as a set of method signatures, but it is also a type. Interfaces make the code more flexible, scalable and this is one way to achieve polymorphism in Golang. When a type provides definition for all the methods in the interface, it is said to implement the interface. Interfaces are implemented implicitly .Unlike other languages like Java, you don’t need to explicitly specify that a type implements an interface using something like an implement keyword. You just implement all the methods declared in the interface and you’re done.\nLet me explain with an example before you call me a loon.\npackage main import \u0026quot;fmt\u0026quot; type Programmer interface { HelloWorld() string }  Preety simple:- We define a Programmer as being any type that has a method named HelloWorld. The HelloWorld method takes no arguments and returns a string. Any type that defines this method is said to satisfy the Programmer interface. Let’s create some of the types that satisfy this interface-\n type GO struct { } func (a GO) HelloWorld() string { return \u0026quot;fmt.Println('hello world')\u0026quot; } type Java struct { } func (b Java) HelloWorld() string { return \u0026quot;System.out.println('Hello World')\u0026quot; } type Ruby struct { } func (c Ruby) HelloWorld() string { return \u0026quot;puts 'Hello World' \u0026quot; } type JavaScript struct { } func (d JavaScript) HelloWorld() string { return \u0026quot;console.log('Hello World')\u0026quot; } type Julia struct { } func (e Julia) HelloWorld() string { return \u0026quot;print('Hello World')\u0026quot; } type Scala struct { } func (f Scala) HelloWorld() string { return \u0026quot;println('Hello World')\u0026quot; }  We now have six different types of Programmers. In our main() function, we can create a slice of Programmers, and put one of each type into that slice, and see How each programmer prints \u0026lsquo;Hello World\u0026rsquo;. Let’s do that now:\nfunc main() { programmers := []Programmer{GO{}, Java{}, Ruby{}, JavaScript{}, Julia{},Scala{}} for _, programmer := range programmers { fmt.Println(programmer.HelloWorld()) } }  You can view and run this example here .\n fmt.Println('hello world') System.out.println('Hello World') puts 'Hello World' console.log('Hello World') print('Hello World') println('Hello World') Program exited.  Success  The interface{} type (the empty interface) The interface{} type is similar to that interface, only difference is interface{} type has no methods. Since the empty interface has zero methods, all types implement the empty interface. So we can assign any type of variable to an empty interface. The code is essentially saying “I need an argument, and I don’t care what methods it implements\u0026quot;. That means that if you write a function that takes an interface{} value as a parameter, you can supply that function with any value. So, this function:\n func PerformSomeTask(x interface{}) { ----- ----- }  will accept any parameter whatsoever.This can be a little confusing. Newbies are led to believe that “x is of any type”, but that is wrong. x is not of any type; it is of interface{} type. Wait, what? When passing a value into the PerformSomeTask function, the Go runtime will perform a type conversion (if necessary), and convert the value to an interface{} value. All values have exactly one type at runtime, and a static type of x is interface{}.\nIn our previous example, when we constructed a slice of Programmer values, we did not have to say something awkward like Programmer(Scala{}) to cast a value of type Scala into the slice of programmers values, because the conversion was handled for us automatically. Within the programmers slice, each element is of Programmer type, but our different values have different underlying types.\nlet\u0026rsquo;s look an example for better understanding-\n package main import ( \u0026quot;fmt\u0026quot; ) func PrintAll(vals []interface{}) { for _, val := range vals { fmt.Println(val) } }  Here’s some broken code in main function that is representative of a common misunderstanding of interface{} type\nfunc main() { names := []string{\u0026quot;stanley\u0026quot;, \u0026quot;david\u0026quot;, \u0026quot;oscar\u0026quot;} PrintAll(names) }  Running this, you can see that we encounter the following error: cannot use names (type []string) as type []interface {} in function argument.  If we want to actually make that work, we would have to convert the []string to an []interface{}:\nfunc main() { names := []string{\u0026quot;stanley\u0026quot;, \u0026quot;david\u0026quot;, \u0026quot;oscar\u0026quot;} vals := make([]interface{}, len(names)) for i, v := range names { vals[i] = v } PrintAll(vals) } Ok  This might look pretty ugly, but c\u0026rsquo;est la vie. Not everything is perfect.\n","date":"Jul 26, 2021","permalink":"/en/posts/interfaces/","series":["Projects"],"tags":["GO","interfaces"],"title":"Interfaces"},{"categories":null,"content":"Introduction to Linux Operating Systems. It is advisable to write everything you do. May be you learnt something new in Version control systems, or to fix something in your operating system. As similar problems becomes convenient if you have solutions to previously faced issues with you. Ofc this also preserve your interest.This blog mainly contains my Learnings and experience about operating systems.Story of having multiple OSes on my machine. Also why I prefer linux kernel over WindowsAbout six months ago I thought of switching from windows to linux. But why?\n There are countless reasons why one should go for Linux. Once you search on google it will bring you many articles on why you should choose Linux, such as “Why you should switch to Linux,” “What are the benefits of learning Linux,” and “Is it worth my time to learn Linux while learning programming?”It takes a while, but it\u0026rsquo;s worth the read. We\u0026rsquo;ll talk about that sometime later.\n Generally transitions are always hard and can also be scary. For Windows users who has never used the CLI, transitioning to Linux can be really scary. But also knowing that others also find it difficult can be really consoling at times :smile in pain:. Fear of screwing up makes the transitions difficult. But if you can manage the first few days, the ultimate returns are exponential.Though linux is a great operating system with widespread hardware and software support, but the reality is that sometimes you have to use Windows, perhaps due to key apps that won\u0026rsquo;t run on Linux. So installing Linux alongside Windows(dual boot) was the thing I was going to do.\n At first I chose Ubuntu (as recommended for beginners) to start with. And later installed other linux destros as well.Choose other flavours once you know better and can decide for yourself. Although the dual-boot setup process is not very involved, One can easily dual boot following some articles over internet. But due to different varieties of laptops and thier different workings things doesn\u0026rsquo;t work accordingly. Accidents can still happen. So before you get started, make sure you\u0026rsquo;ve backed up your computer. In addition to backing up your files, consider taking an image backup of the disk as well, though that\u0026rsquo;s not required and can be a more advanced process.\n","date":"Jul 22, 2021","permalink":"/en/posts/operating-systems/","series":["linux"],"tags":["os","ubuntu","debian"],"title":"Operating Systems"},{"categories":["Programming"],"content":"Markdown is a way to style text on the web. You control the display of the document; formatting words as bold or italic, adding images, and creating lists are just a few of the things we can do with Markdown. Mostly, Markdown is just regular text with a few non-alphabetic characters thrown in, like # or *.\nYou can use Markdown most places around GitHub:\nGists Comments in Issues and Pull Requests Files with the .md or .markdown extension  This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\n# This is an \u0026lt;h1\u0026gt; tag ## This is an \u0026lt;h2\u0026gt; tag ###### This is an \u0026lt;h6\u0026gt; tag H1 H2 H6 Emphasis *This text will be italic* _This will also be italic_ **This text will be bold** __This will also be bold__ _You **can** combine them_ This text is italic\nThis is also italic\nThis text is bold This is also bold You can combine them\n Type ' \\ ' to break horizontal line.\n Images Format: ![Alt Text](url) Links Format: [This](url) is Blog102 This is Blog102\nInline code I think you should use an `\u0026lt;addr\u0026gt;` element here instead. I think you should use an \u0026lt;addr\u0026gt; element here instead.\nParagraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution \u0026gt; Tiam, ad mint andaepu dandae nostion secatur sequo quae. \u0026gt; **Note** that you can use *Markdown syntax* within a blockquote.  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution \u0026gt; Don't communicate by sharing memory, share memory by communicating.\u0026lt;br\u0026gt; \u0026gt; — \u0026lt;cite\u0026gt;Rob Pike[^1]\u0026lt;/cite\u0026gt;  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike[^1] Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n Name | Age --------|------ Bob | 27 Alice | 23    Name Age     Bob 27   Alice 23    Inline Markdown within tables | Italics | Bold | Code | | -------- | -------- | ------ | | *italics* | **bold** | `code` |    Italics Bold Code     italics bold code    Code Blocks Code block with backticks ```html\nWrite your code here\n```\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode {{\u0026lt; highlight html \u0026gt;}} Write your code here\n{{\u0026lt; /highlight \u0026gt;}} \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\nList Types Ordered List 1. First item 2. Second item 3. Third item  First item Second item Third item  Unordered List * List item * Another item * And another item  List item Another item And another item  Nested list * Fruit * Apple * Orange * Banana * Dairy * Milk * Cheese  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Task Lists - [x] @mentions, #refs, [links](), **formatting**, and ~~tags~~ supported - [x] list syntax required (any unordered or ordered list supported) - [x] this is a complete item - [ ] this is an incomplete item  @mentions, #refs, links , formatting, and tags supported list syntax required (any unordered or ordered list supported) this is a complete item this is an incomplete item  Other Elements — abbr, sub, sup, kbd, mark \u0026lt;abbr title=\u0026quot;Graphics Interchange Format\u0026quot;\u0026gt;GIF\u0026lt;/abbr\u0026gt; is a bitmap image format. GIFis a bitmap image format.\nH\u0026lt;sub\u0026gt;2\u0026lt;/sub\u0026gt;O H2O\nX\u0026lt;sup\u0026gt;n\u0026lt;/sup\u0026gt; + Y\u0026lt;sup\u0026gt;n\u0026lt;/sup\u0026gt; = Z\u0026lt;sup\u0026gt;n\u0026lt;/sup\u0026gt; Xn+ Yn= ZnPress \u0026lt;kbd\u0026gt;\u0026lt;kbd\u0026gt;CTRL\u0026lt;/kbd\u0026gt;+\u0026lt;kbd\u0026gt;ALT\u0026lt;/kbd\u0026gt;+\u0026lt;kbd\u0026gt;Delete\u0026lt;/kbd\u0026gt;\u0026lt;/kbd\u0026gt; to end the session. Press CTRL+ALT+Deleteto end the session.\n","date":"Jul 12, 2021","permalink":"/en/posts/markdown-syntax/","series":null,"tags":["Markdown","CSS","HTML"],"title":"Markdown Syntax Guide"},{"categories":["Shortcode"],"content":"Rienforcement Learning to develop AI agents Reinforcement learning (RL) is an area of machine learning concerned with how intelligent agents ought to take actions in an environment in order to maximize the notion of cumulative reward.Reinforcement learning is one of three basic machine learning paradigms, alongside supervised learning and unsupervised learning.\nReinforcement learning differs from supervised learning in not needing labelled input/output pairs be presented, and in not needing sub-optimal actions to be explicitly corrected. Instead the focus is on finding a balance between exploration (of uncharted territory) and exploitation (of current knowledge). This project \u0026ldquo;Learning RL to develop AI agents\u0026rdquo; was offered by ACA(Association of Computer Activities IITK).\nGeneral Concepts : Introduction to Machine Learning  Field of study that gives computers the ability to learn without being explicitly programmed.A computer program is said to learn from experience E with respect to some task T and some performance measure P,if its performance on T,as measured by P, improves with experience E.\nMachine learning algorithms:  Supervised learning Unsupervised learning Reinforcement learning.  Model Representation Generaling speaking,The aim of the supervised learning algorithm is to use the given training Dataset and output a Hypothesis function.Where Hypothesis function takes the input instance and predicts the output based on its learnings from the training dataset. Linear\tregression\twith\tone\tvariable. For linear regression in one variable,the hypothesis function will be of the form-h(x) = Θ0 + Θ1*x where, Θ0 and Θ1 are the parameters.\nThe line seen in the graph is the Hypothesis function. This line is the best fit that passes through most of the points.Now we know it\u0026rsquo;s not possible to tell the hypothesis function by merely looking at the graph! We need some systematic way to figure it out.Cost Functionhelps us to figure out which hypothesis best fits our data. Or more formally,It helps us to measure the errorof our hypothesis.It\u0026rsquo;s often called the squared error function.Mathematically, Cost function —\n(h(x) — y)² : Squared vertical distances of the scattered points from the hypothesis. ∑(h(x) — y)²/2m: Average Squared vertical distances of the scattered points from the hypothesis, i.e Mean Squared error. Now we have our hypothesis function and we also have a method of measuring how well it fits into the given data.All we need to do is find the value of parameters(Θ0 and Θ1) for which the cost function (i.e. error) is minimum.That’s where gradient descent comes into the picture\nGradient descentis an optimization algorithm for finding a local minimum of a differentiable function.Gradient descent is simply used to find the values of a function\u0026rsquo;s parameters that minimize a cost function as much as possible.Here you can find more details about Gradient descent.Mathematical form of Gradient Descent for Linear Regression-repeat until Convergence:{ Theta(0) := Theta(0) - (α/m)* Σ(h(xi) - yi) Theta(1) := Theta(1) - (α/m)* Σ(h(xi) - yi) } Note:- 1) Update Theta(0) and Theta(1) Simultaneously. 2) Σ is done for i=0 to m. where, m is Number of training examples in training dataset. Here, α is the size of each step known as the Learning rate. The value of α should be selected with care to ensure that the gradient descent algorithm converges correctly in a reasonable time. \nTo be continued\u0026hellip;\nCome back soon for more :) Go ahead and give some stuff here a read.\n","date":"Jul 12, 2021","permalink":"/en/posts/rienforcement-learning/","series":["Projects"],"tags":["RL","ML","aca"],"title":"Rienforcement Learning to develop AI agents"},{"categories":null,"content":"Hey ,Glad you are here :Slightly Smiling Face: I’m Sandeep Kumar, a undergrad student in Computer Science and Engineering at IIT Kanpur,(class of 2024). Since the endsem exams of my second semester ended today {in my bedroom on a random Sunday at 11:10 AM :Slightly Frowning Face: } I thought of posting programming stuffs and general life experience as well. So I chose to make my own blog manager.Based on my experience and working with peers I loved to give you an overview. I am grateful for working with some amazing people from which I had the pleasure to learn a lot.\n After researching different programming languages I really got into HTML and CSS.For me initially it was the desire to build my own website. Then in the process I found the beautiful world of programming :) .\n This is my second webpage ready in two semester. Though every time I try something cool and new to get a good learning experience. So finally this time I decided to use some static site generators. Yes, it is easy to maintain and support full markdown based blog along with other great features\nCurrently I have hosted this blog on Netlify and Github pages. Sometime Later I might shift to other domains if I find some cool one or a Personal domain.\n This static site is build using Jekyll Hugo framework and a Bootstrap theme.\n Is it easy to setup Hugo ? I went through the Official docs of Hugo.Here are some of the key points from the docs:-\n Hugo can be installed on any machine where the Go compiler tool chain can run. Being familiar with Golang and Ruby was the reason I chose Hugo and Jekyll respectively over any other frameworks. We can install Hugo using sudo snap install hugo and sudo apt-get install hugopackages but these options are not recommended because the Hugo in Linux package managers for Debian and Ubuntu is usually a few versions behind. Homebrew was recommended but I personally don\u0026rsquo;t want to install brew for just Hugo. So I then tried to find some extended versions of Hugo on google. But still being a noob at googling I couldn\u0026rsquo;t find any way.   Above point is only for Ubuntu and Debian. As most of the time I use these two operating systems.(Also I will describe more about operating systems I have on my machine and how I f*cked up while Installing multiple OS in some another blog ,till then stay tuned.)  I finally found a Extended version on Github : facepalm : . Here are some steps how I installed it-   Open Your terminal (Ctrl+Alt+T) and download the latest version of Hugo package from the Git repository by executing the following commands:- 1.$ sudo apt-get update -y 2.$ wget https://github.com/gohugoio/hugo/releases/download/v0.79.0/hugo_0.79.0_Linux-64bit.deb 3. $ sudo dpkg -i hugo_0.79.0_Linux-64bit.deb 4. $ sudo apt-get install -f Info  You can check version by-\nhugo version Success  Hugo setup is complete and ready to work. Refer to above git repository for updated versions.\n During the whole process of building this blog I spent majority of time understanding how it works and customizing the CSS . Do check Dark Mode ,Font Size and Palette in settings at top right corner. It might be disconcert initially but altogether it\u0026rsquo;s easy to maintain (You can create the whole syntax of new posts just by executing some commands.) There’s a lot more to explore about it.This was all about how this blog enhanced. See you a semester later! :)If you got here after reading this, I must\u0026rsquo;ve been making sense. If you have any questions, feel free to hit me up. I look forward to seeing you soon on campus. :Red Heart: \n ⚠️ If you are using mobile browser: Be very careful here!\n ","date":"Jul 11, 2021","permalink":"/en/posts/blog102/","series":["About me"],"tags":["blog102","Hugo","Jekyll"],"title":"Blog102"},{"categories":["Shortcode"],"content":"I\u0026rsquo;m writting this blog while doing my summer project on getting insights into various programming languages and understanding the different paradigms of programming.\n General Concepts- Here is a quick overview on Fundamentals of Programming Languages : Similar to human interface languages, which have their own set of rules that have to be followed in order to write correctly in that language, programming languages ​​also follow certain rules.Classification of programming languages on the basis of -\n Programming Paradigms Programming Models Type System  1) Programming Paradigms Programming Paradigm is a style, technique, or way of writing a program to solve a problem.There are two primary programming paradigms:-\n Imperative :- Imperative programming is the oldest programming paradigm.Programs in which we need to clearly define the sequence of instructions for the computer are imperative. Declarative:- In the declarative programming paradigm, we simply tell the problem to the computer and let the computer decide what action to take. In other words, we just need to express the logic of the computation without talking about its control flow.  2) Programming Models Programming Models :- Programming Model is a set of concepts used to create software, which are mainly used to guide the development of programming languages. The programming model acts as a bridge between algorithms and actual implementations. Languages can be classified into many, many models.\n  Procedural Oriented: The program in which code is written in step wise procedure mainly in the form of sub-functions is Procedural Oriented.This is derived from structured programming.For example C language.\n  Purely Object Oriented: Languages in which everything is treated consistently as an object, from primitives such as characters and integers, all the way up to whole classes, blocks, modules,etc.Ruby is one such language.\n  Purely Functional: Languages in which programs are constructed by applying and composing functions.Here, functions also do not have any side-effects in other words no function can alter the internal state of some variable.Haskell is one such language.\n  Logic Programming: Languages in which a program is written as a set of sentences in logical form.For these, PROLOG(programming in logic) is the best known example. Here, a program is executed by an “inference engine” that answers a query by searching these relations systematically to make inferences that will answer a query.\n  3) Type System In programming languages, a type system is a logical system comprising a set of rules that assigns a property called a type to the various constructs of a computer program, such as variables, expressions, functions or modules.\n A.Strong vs Weak typing: B.Static vs Dynamic 1 typing: C.Manifest vs Inferred: D.Nominal vs Structural: E. Duck Typing:   This project comprises of following six major languages: Python  JavaScript  Ruby  Go  Scala  Julia   More Info about above languages and tasks can be found in respective folders.\n","date":"Jun 17, 2021","permalink":"/en/posts/programming-languages/","series":["Projects"],"tags":["programming101","paradigms"],"title":"getting insights into various programming languages"},{"categories":[],"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes .\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\n N.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1).emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; }\n","date":"Jun 15, 2021","permalink":"/en/posts/emoji-support/","series":null,"tags":["Emoji"],"title":"Emoji Support"},{"categories":null,"content":"Hi! I am a Sophomore at IIT Kanpur.Currently Pursuing my majors in the Department of Computer Science and Engineering.\nThere\u0026rsquo;s much more for me rather than just studying. I’m interested in jumping in and trying out some coding. I love to play outdoor games, sometimes pc gaming, some writing to share my stories, and of course knocking around with my friends.\nBieng the lone wolf is ok, it tells me you\u0026rsquo;re independent ,brave, strong\u0026hellip;.. But it is more important to be in a pack. I am grateful for working with some amazing people from which I had the pleasure to learn a lot. If you want to collaborate/have a query or just want to gossip feel free to hit me up. I am always tempted to connect with people :Grinning Face:.\nMajor Interests  Machine learning Competitive Programming Artificial Intelligence Software Development  ","date":"Jun 2, 2021","permalink":"/en/about/","series":null,"tags":null,"title":"About Me"}]